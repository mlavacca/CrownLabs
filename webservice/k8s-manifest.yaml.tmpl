---
apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE_FRONTEND}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-env-vars
  namespace: ${NAMESPACE_FRONTEND}
data:
  apiserver_url: ${CM_APISERVER_URL}
  oidc_client_id: ${CM_OIDC_URL}
  oidc_client_secret: ${CM_OIDC_CLIENT_SECRET}
  oidc_provider_url: ${CM_OIDC_PROVIDER_URL}
  oidc_redirect_uri: ${CM_OIDC_REDIRECT_URI}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: frontend
  name: frontend
  namespace: ${NAMESPACE_FRONTEND}
spec:
  replicas: ${REPLICAS_FRONTEND}
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - image: crownlabs/frontend:${IMAGE_TAG}
          imagePullPolicy: Always
          name: frontend
          securityContext:
            runAsUser: 101
            runAsGroup: 101
            privileged: false
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
          resources:
            limits:
              memory: 100Mi
              cpu: 100m
            requests:
              memory: 100Mi
              cpu: 100m
          ports:
            - containerPort: 80
              protocol: TCP
              name: http
          env:
            - name: OIDC_PROVIDER_URL
              valueFrom:
                configMapKeyRef:
                  name: frontend-env-vars
                  key: oidc_provider_url
            - name: OIDC_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: frontend-env-vars
                  key: oidc_client_id
            - name: OIDC_CLIENT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: frontend-env-vars
                  key: oidc_client_secret
            - name: OIDC_REDIRECT_URI
              valueFrom:
                configMapKeyRef:
                  name: frontend-env-vars
                  key: oidc_redirect_uri
            - name: APISERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: frontend-env-vars
                  key: apiserver_url
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: frontend
  name: frontend
  namespace: ${NAMESPACE_FRONTEND}
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: frontend
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
  name: frontend-content
  namespace: ${NAMESPACE_FRONTEND}
spec:
  rules:
    - host: ${HOST_NAME}
      http:
        paths:
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /config.js
            pathType: ImplementationSpecific
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /bundle.js
            pathType: ImplementationSpecific
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /c0995264e0b7a6a048e3e8cdc92c4f7b.png
            pathType: ImplementationSpecific
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /183b14c6350152eea9a170e2607e8c44.png
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - ${HOST_NAME}
      secretName: frontend-cert

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://*"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /index.html
  name: frontend-auxiliary
  namespace: ${NAMESPACE_FRONTEND}
spec:
  rules:
    - host: ${HOST_NAME}
      http:
        paths:
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /callback
            pathType: ImplementationSpecific
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /logout
            pathType: ImplementationSpecific
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /userview
            pathType: ImplementationSpecific
          - backend:
              service:
                name: frontend
                port:
                  name: http
            path: /login
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - ${HOST_NAME}
      secretName: frontend-cert
